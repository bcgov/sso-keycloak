apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: metabase
    service: {{ .Values.metabaseServiceName }}
    template: metabase-postgresql-template
  name: {{ .Values.metabaseServiceName }}-postgresql
spec:
  replicas: 1
  selector:
    name: {{ .Values.metabaseServiceName }}-postgresql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: metabase
        name: {{ .Values.metabaseServiceName }}-postgresql
    spec:
      containers:
      - env:
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database
              name: {{ .Values.metabaseServiceName }}-postgresql-credentials
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ .Values.metabaseServiceName }}-postgresql-credentials
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ .Values.metabaseServiceName }}-postgresql-credentials
        image: ' '
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - pg_isready -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          timeoutSeconds: 1
        name: {{ .Values.metabaseServiceName }}-postgresql
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
              'SELECT 1'
          initialDelaySeconds: 5
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: {{ .Values.metabaseServiceName }}-postgresql-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: {{ .Values.metabaseServiceName }}-postgresql-data
        persistentVolumeClaim:
          claimName: {{ .Values.metabaseServiceName }}-postgresql
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - {{ .Values.metabaseServiceName }}-postgresql
      from:
        kind: ImageStreamTag
        name: postgresql:{{ .Values.postgresqlVersion }}
        namespace: {{ .Values.postgresqlImageNamespace }}
      lastTriggeredImage: ""
    type: ImageChange
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: metabase
    service: {{ .Values.metabaseServiceName }}
    template: metabase-postgresql-template
  name: {{ .Values.metabaseServiceName }}
spec:
  replicas: 1
  selector:
    app: metabase
    deploymentconfig: {{ .Values.metabaseServiceName }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: metabase
        deploymentconfig: {{ .Values.metabaseServiceName }}
        service: {{ .Values.metabaseServiceName }}
        template: metabase
    spec:
      containers:
      - args:
        - -Xmx4096m
        - -Xss512k
        - -Dfile.encoding=UTF-8
        - -Dlogfile.path=target/log
        - -XX:+CMSClassUnloadingEnabled
        - -XX:+UseConcMarkSweepGC
        - -server
        - -jar
        - /app/metabase.jar
        command:
        - java
        env:
        - name: MB_DB_TYPE
          value: postgres
        - name: MB_DB_HOST
          value: {{ .Values.metabaseServiceName }}-postgresql
        - name: MB_DB_PORT
          value: "5432"
        - name: MB_DB_DBNAME
          value: {{ .Values.postgresqlDatabase }}
        - name: MB_DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ .Values.metabaseServiceName }}-postgresql-credentials
        - name: MB_DB_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ .Values.metabaseServiceName }}-postgresql-credentials
        image: {{ .Values.metabaseImage }}
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 30
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 240
          timeoutSeconds: 3
        name: {{ .Values.metabaseServiceName }}
        ports:
        - containerPort: 3000
          name: {{ .Values.metabaseServiceName }}
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 3
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
          requests:
            cpu: 250m
            memory: 1Gi
        terminationMessagePath: /dev/termination-log
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: artifactory-creds
      restartPolicy: Always
      serviceAccount: {{ .Values.metabaseServiceName }}
      serviceAccountName: {{ .Values.metabaseServiceName }}
      terminationGracePeriodSeconds: 30
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - {{ .Values.metabaseServiceName }}
      from:
        kind: ImageStreamTag
        name: {{ .Values.metabaseServiceName }}:latest
      lastTriggeredImage: ""
    type: ImageChange
